# GitHub Actions CI/CD Pipeline
#
# This workflow automates testing and deployment for AssetBridge.
#
# Workflow Triggers:
# - Push to 'main' or 'release' branches
# - Pull requests targeting 'main' or 'release' branches
#
# Jobs:
# 1. test: Runs on all triggers (push + PR)
#    - Lints code
#    - Runs unit tests for backend and frontend
#    - Builds both backend and frontend
#
# 2. deploy: Runs only when pushing to 'release' branch (not on PRs)
#    - Only runs if tests pass
#    - Deploys to Heroku production environment

name: CI/CD Pipeline

# Define when this workflow should run
on:
  push:
    branches: [main, release]  # Run on pushes to main or release
  pull_request:
    branches: [main, release]  # Run on PRs to main or release

jobs:
  # Job 1: Run tests and build
  test:
    name: Run Tests and Build
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use Node.js version 18
          cache: 'npm'        # Cache npm dependencies for faster runs

      # Step 3: Install all dependencies
      # Using 'npm ci' instead of 'npm install' for:
      # - Faster installation
      # - Consistent installs (uses package-lock.json exactly)
      # - Clean slate (removes node_modules first)
      - name: Install dependencies
        run: npm ci

      # Step 4: Build shared package
      # Must be built before tests run because backend and frontend depend on it
      # The shared package contains TypeScript types used across the monorepo
      - name: Build shared package
        run: npm run build --workspace=@assetbridge/shared

      # Step 5: Run linting checks
      # Ensures code follows style guidelines
      - name: Lint code
        run: npm run lint

      # Step 6: Run backend tests
      # Executes Jest tests for backend API
      - name: Run backend tests
        run: npm run test:backend

      # Step 7: Run frontend tests
      # Executes Vitest tests for React components
      - name: Run frontend tests
        run: npm run test:frontend

      # Step 8: Build backend
      # Compiles TypeScript to JavaScript
      - name: Build backend
        run: npm run build:backend

      # Step 9: Build frontend
      # Bundles React app for production
      - name: Build frontend
        run: npm run build:frontend

  # Job 2: Deploy Backend to Heroku
  deploy-backend:
    name: Deploy Backend to Heroku
    needs: test                    # Only run if 'test' job succeeds
    runs-on: ubuntu-latest

    # Conditional execution:
    # - Only run on 'release' branch
    # - Only run on push events (not pull requests)
    # This ensures deployment only happens when code is merged to release
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper Heroku deployment

      # Step 2: Install Heroku CLI
      # Manually install Heroku CLI for more reliable deployment
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      # Step 3: Configure git credentials for Heroku
      # Sets up authentication using Heroku API key
      - name: Configure Heroku credentials
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cat > ~/.netrc <<EOF
          machine api.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password $HEROKU_API_KEY
          machine git.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password $HEROKU_API_KEY
          EOF
          chmod 600 ~/.netrc

      # Step 4: Deploy Backend to Heroku
      # Uses Heroku CLI to deploy the backend application
      # Uses default Procfile which runs the backend
      - name: Deploy Backend to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku git:remote -a ${{ secrets.HEROKU_BACKEND_APP_NAME }}
          git push heroku release:main

  # Job 3: Deploy Frontend to Heroku
  deploy-frontend:
    name: Deploy Frontend to Heroku
    needs: test                    # Only run if 'test' job succeeds
    runs-on: ubuntu-latest

    # Conditional execution:
    # - Only run on 'release' branch
    # - Only run on push events (not pull requests)
    # This ensures deployment only happens when code is merged to release
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper Heroku deployment

      # Step 2: Install Heroku CLI
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh

      # Step 3: Configure git credentials for Heroku
      - name: Configure Heroku credentials
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cat > ~/.netrc <<EOF
          machine api.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password $HEROKU_API_KEY
          machine git.heroku.com
            login ${{ secrets.HEROKU_EMAIL }}
            password $HEROKU_API_KEY
          EOF
          chmod 600 ~/.netrc

      # Step 4: Set Frontend Environment Variables
      # Configure frontend with backend API URL
      - name: Set Frontend Environment Variables
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
          HEROKU_FRONTEND_APP_NAME: ${{ secrets.HEROKU_FRONTEND_APP_NAME }}
        run: |
          heroku config:set VITE_API_URL="$BACKEND_API_URL" -a "$HEROKU_FRONTEND_APP_NAME"

      # Step 5: Prepare Frontend Procfile
      # Replace Procfile with Procfile.frontend for frontend deployment
      - name: Prepare Frontend Procfile
        run: |
          cp Procfile.frontend Procfile
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Procfile
          git commit -m "Use frontend Procfile for deployment [skip ci]" || echo "No changes to commit"

      # Step 6: Deploy Frontend to Heroku
      # Uses Heroku CLI to deploy the frontend application
      - name: Deploy Frontend to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku git:remote -a ${{ secrets.HEROKU_FRONTEND_APP_NAME }}
          git push heroku release:main --force
